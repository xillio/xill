package nl.xillio.xill.plugins.excel.constructs;

import com.google.inject.Inject;
import nl.xillio.xill.api.components.MetaExpression;
import nl.xillio.xill.api.construct.Argument;
import nl.xillio.xill.api.construct.Construct;
import nl.xillio.xill.api.construct.ConstructContext;
import nl.xillio.xill.api.construct.ConstructProcessor;
import nl.xillio.xill.api.errors.NotImplementedException;
import nl.xillio.xill.api.errors.RobotRuntimeException;
import nl.xillio.xill.plugins.excel.datastructures.XillWorkbook;
import nl.xillio.xill.plugins.excel.services.ExcelService;
import org.apache.commons.io.FilenameUtils;

import java.io.File;
import java.io.IOException;
import java.nio.file.FileAlreadyExistsException;

/**
 * Construct to create a new XillWorkbook.
 *
 * @author Daan Knoope
 */
public class CreateWorkbookConstruct extends Construct {

	@Inject
	private ExcelService excelService;

	/**
	 * Processes the xill code to create a new workbook at the provided location.
	 *
	 * @param excelService the ExcelService generated by the construct
	 * @param context      the ConstructContext passed to the construct
	 * @param filePath     the (relative or absolute) path were the new worbook should
	 *                     be stored. An xlsx extension is added when none is provided.
	 * @return a String naming the absolute path where the workbook will be located
	 * (after having used the {@link SaveConstruct}) including the {@link XillWorkbook}
	 * that has been created
	 * @throws RobotRuntimeException when a file already exists at the provided location or when
	 *                               the workbook cannot be written to the given path
	 */
	static MetaExpression process(ExcelService excelService, ConstructContext context, MetaExpression filePath) {
		String path = filePath.getStringValue();
		if (FilenameUtils.getExtension(path).isEmpty())
			path = path + ".xlsx";

		File file = getFile(context, path);
		XillWorkbook workbook;
		try {
			workbook = excelService.createWorkbook(file);
		} catch (FileAlreadyExistsException e) {
			throw new RobotRuntimeException(e.getMessage(), e);
		} catch (NotImplementedException e) {
			throw new RobotRuntimeException(e.getMessage(), e);
		} catch (IOException e) {
			throw new RobotRuntimeException("Cannot write to the supplied path", e);
		}

		String returnString = workbook.getFileString();
		MetaExpression returnValue = fromValue(returnString);
		returnValue.storeMeta(XillWorkbook.class, workbook);
		return returnValue;
	}

	@Override
	public ConstructProcessor prepareProcess(ConstructContext context) {
		return new ConstructProcessor(
						a -> process(excelService, context, a),
						new Argument("filePath", ATOMIC));
	}
}
