<?xml version="1.0" encoding="utf-8"?>
<function>
    <description>
Finds a single document using the specified `query` and `options` and updates it with `update`. Also returns the document that was . If multiple documents match the query, then the first document in the result will be updated. In that case, if you do not specify the `sort` option, the selected document will be undefined. If no documents matched the `query` filter, then `null` will be returned.
The `options` parameter may contain the following options:

| Option     | Description |
| ---------- | ----------- |
| `projection` | A document describing the fields to return for the matching document.
| `sortBy`   | A document with sort criteria to apply to the query. The default is `null`, which means that the documents will be returned in an undefined order.
| `upsert`   | If set to true, creates a new document if no document matches the query, or if documents match the query, performs an update. To avoid multiple upserts, ensure that the query fields are uniquely indexed. The default is false.
| `returnNew`| If set to true, returns the modified document rather than the original. The default is false.
| `maxTime`  | The maximum execution time in milliseconds for this operation.
    </description>
    <examples>
        <example title="Usage">
            <header>Log and update the first element in a selection of documents</header>
            <code>
                use Mongo;
                use System;
                use Date;
                Mongo.connect("udm_default");

                //return only the _id, contenttype and target properties
                var projection = {"_id": true, "contenttype": true,  "target":true};

                //sort by timestamp (oldest first)
                var sort = {"target.timestamp": 1};

                //select the dates before this moment
                var datum = Date.parse("2015-12-17 14:32:55.476Z", "yyyy-MM-dd HH:mm:ss.SSSz");

                //update the earliest document in selection return the projected properties
                var result = Mongo.findOneAndUpdate(
                    "documents",
                    {"target.timestamp" :
                        {"$lte" : datum}
                    },
                    { "$set" :
                        {"contenttype":"kerstkaart"}
                    },
                        {"projection":projection, "sort":sort}
                );

                System.print ("Updated document with id: " :: result._id :: ", contenttype: " :: result.contenttype :: ", timestamp: " :: result.target.timestamp);
            </code>
        </example>
    </examples>
    <references>
        <reference>update</reference>
        <reference>connect</reference>
        <reference>find</reference>
        <reference>findOneAndDelete</reference>
        <reference>findOneAndReplace</reference>
    </references>
    <tags>
        mongodb, query, update, filter
    </tags>
</function>
