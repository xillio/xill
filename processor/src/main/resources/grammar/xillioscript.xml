<Language name="xillioscript" version="2.0">
	<Rules>
		<!-- Assignment (a = 1 + 2;) -->
		<Rule name="instruction_assignment" allowedAtRoot="true" helptext="A variable assignment followed by a delimiter. E.g. a = myfunction(b); or a = &quot;b&quot;">
			[block_arrayvariable,keyword],assignment,[block_list,block_expression],block_delimiter
		</Rule>
		
		<!-- Lazy Assignment (a += 2;) -->
		<Rule name="instruction_lazyassignment" allowedAtRoot="true" helptext="A variable operation followed by a delimiter. E.g. a += myfunction(b); or a -= &quot;b&quot;">
			block_expression_lazyassign,block_delimiter
		</Rule>
		
		<!-- Routine call (doSomething();) -->
		<Rule name="instruction_routinecall" allowedAtRoot="true" helptext="A routine call followed by a delimeter. E.g. log(my_text);">
			keyword,block_argument,block_delimiter
		</Rule>
		
		<!--  Delimiter to close an instruction -->
		<Rule name="block_delimiter" allowedAtRoot="true" helptext="A delimiter ';' to mark the end of the last instruction.">
			delimiter
		</Rule>
		
		<!-- Expression on root level -->
		<Rule name="instruction_openexpression" allowedAtRoot="true" helptext="An expression at root level. Eg. i++">
			block_expression_simple,block_delimiter
		</Rule>
		
		<!-- Routine definition (aFunction = routine(){...} ) -->
		<Rule name="instruction_routinedef" allowedAtRoot="true" helptext="A custom routine definition. Eg. myfunction = routine(arg1, arg2) { [instructions] }">
			keyword,assignment,routine,block_argument,block_instructionblock
		</Rule>
		
		<!-- Conditional construct (if(something==true){...}) -->
		<Rule name="instruction_conditional" allowedAtRoot="true" helptext="A if/else block. Eg. if(condition) { [instructions] } else { [other instructions] }">
			if,block_condition,block_instructionblock,(else,[block_instructionblock,instruction_conditional])?
		</Rule>
		
		<!-- Loop construct (while(something==true){...}) -->
		<Rule name="instruction_whileloop" allowedAtRoot="true" helptext="A while block. Eg. while(condition) { [instructions] }">
			while,block_condition,block_instructionblock
		</Rule>
		
		<!-- Loop construct (foreach(key, val, list){...}) -->
		<Rule name="instruction_foreachloop" allowedAtRoot="true" helptext="A foreach block. Eg. foreach(key, value, expression) { [instructions] }">
			foreach,block_foreachargument,block_instructionblock
		</Rule>
		
		<!-- lazy assignment block -->
		<Rule name="block_expression_lazyassign" allowedAtRoot="false" helptext="A lazy assignment expression. Eg. a += b">
			[block_arrayvariable,keyword],block_lazyoperator,[block_list,block_expression]
		</Rule>
		
		<!-- lazy assignment operator -->
		<Rule name="block_lazyoperator" allowedAtRoot="false" helptext="Lazy assignment operator. Eg. +=">
			[operator_modulo, operator_power, operator_divide, operator_multiply, operator_minus, operator_plus], assignment
		</Rule>
		
		
		
		<!-- Expression (basic operations like add, multiply, etc.) -->
		<Rule name="block_expression_simple" allowedAtRoot="false" helptext="A normal expression: Eg. a + b / (c - d)">
			[block_suffixedentity,block_prefixedentity,block_entity],([operator_plus, operator_minus, operator_multiply, operator_divide, operator_modulo, operator_power, operator_negate],[block_suffixedentity,block_prefixedentity, block_entity])*
		</Rule>
		
		<!-- Equals expression block -->
		<Rule name="block_expression_compare" allowedAtRoot="false" helptext="A boolean expression. Eg. a &gt; b">
			block_expression_simple,(compare,block_expression_simple)?
		</Rule>
		
		<!-- boolean expression block -->
		<Rule name="block_expression" allowedAtRoot="false" helptext="A boolean expression. Eg. a || b">
			block_expression_compare,(boolean,block_expression_compare)*
		</Rule>
		
		
		<!-- Prefix operator on single item e.g. -a -->
		<Rule name="block_prefixedentity" allowedAtRoot="false" helptext="A prefix operator. Eg. -a">
			[operator_increment, operator_reduction, operator_minus, operator_negate],block_entity
		</Rule>
		
		<!-- Suffix operator on single item e.g. a++ -->
		<Rule name="block_suffixedentity" allowedAtRoot="false" helptext="A suffix operator. Eg. a++">
			block_entity,[operator_increment, operator_reduction]
		</Rule>
		
		<!-- Entity: a keyword, function, literal or expression group -->
		<Rule name="block_entity" allowedAtRoot="false" helptext="An entity that holds a value. Eg. a variable, a function coll, a literal, etc.">
			[block_arrayvariable,block_functioncall,keyword,literal,block_expressiongroup]
		</Rule>
		
		<!-- arrayvariable: a keyword followed by an array block -->
		<Rule name="block_arrayvariable" allowedAtRoot="false" helptext="An array instruction. Eg. my_array[index + 1]">
			keyword,block_array
		</Rule>
		
		<!-- functioncall: a keyword followed by a argument block -->
		<Rule name="block_functioncall" allowedAtRoot="false" helptext="A function call. Eg. log(my_text)">
			keyword,block_argument
		</Rule>
		
		<!-- Expression group e.g. (a + b) -->
		<Rule name="block_expressiongroup" allowedAtRoot="false" helptext="An expression wrapped in rounded braces. Eg. (a + b)">
			openbraceround,block_expression,closebraceround
		</Rule>
		
		<!-- Simple list block -->
		<Rule name="block_list" allowedAtRoot="false" helptext="A comma seperated list. Eg. {item1, b=item2, c={item3, item4}}">
			openbracecurly,(block_listitem,(seperator,block_listitem)*)?,(seperator)?,closebracecurly
		</Rule>
		
		<!-- List item -->
		<Rule name="block_listitem" allowedAtRoot="false" helptext="A list entry. Eg. another list, a key-value pair or an expression">
			[block_list,block_keyvaluepair,block_expression]
		</Rule>
		
		<!-- Key value list item: a = 1 -->
		<Rule name="block_keyvaluepair" allowedAtRoot="false" helptext="A key-value pair. E.g. a=1, or &quot;a&quot;=1">
			[literal,keyword],assignment,[block_list,block_expression]
		</Rule>
		
		<!-- Array block: myarray[...] -->
		<Rule name="block_array" allowedAtRoot="false" helptext="An array instruction. Eg. my_array[index + 1]">
			openbracesquare,(block_expression)?,closebracesquare
		</Rule>
		
		<!-- Boolean condition -->
		<Rule name="block_condition" allowedAtRoot="false" helptext="A boolean expression. Eg. a==b || b &lt; c">
			openbraceround,block_expression,closebraceround
		</Rule>
		
		<!-- Foreach block -->
		<Rule name="block_foreachargument" allowedAtRoot="false" helptext="A proper foreach statement. Eg. foreach(key, value, expression)">
			openbraceround,keyword,seperator,keyword,seperator,[block_list,block_entity],closebraceround
		</Rule>
		
		<!-- Function arguments -->
		<Rule name="block_simplearguments" allowedAtRoot="false" helptext="Comma-seperated list of values, e.g.: a, b, c">
			openbraceround,([block_list,block_expression],(seperator,[block_list,block_expression])*)?,closebraceround
		</Rule>
		<Rule name="block_namedarguments" allowedAtRoot="false" helptext="Comma-seperated list of key/value pairs, e.g.: a=1, b=2, c=3">
			openbraceround,(block_keyvaluepair,(seperator,block_keyvaluepair)*)?,closebraceround
		</Rule>
		<Rule name="block_argument" allowedAtRoot="false" helptext="Arguments to be passed to the function: comma-seperated list of values or a comma-seperated list of key/value pairs.">
			[block_simplearguments, block_namedarguments]
		</Rule>
		
		<!-- Instruction block -->
		<Rule name="block_instructionblock" allowedAtRoot="false" helptext="Set of instructions seperated by a semi-colon: {instruction1(); instruction2();}">
			openbracecurly,([instruction_assignment, instruction_lazyassignment, instruction_openexpression,instruction_routinecall,instruction_conditional,instruction_whileloop,instruction_foreachloop])*,closebracecurly
		</Rule>
	</Rules>

	<Tokens>
		<!-- White space -->
		<Token name="whitespace" length="0" iswhitespace="true">
			<Pattern>([\n\r\t\s]+)</Pattern>		
			<Style>
				<Background red="0" green="0" blue="0" alpha="0"/>
				<Foreground red="150" green="0" blue="80" alpha="255"/>
				<Bold>true</Bold>
				<Italic>false</Italic>
			</Style>
			<AlternateStyles/>
		</Token>
	
		<!-- Keywords -->
		<Token name="keyword" length="0">
			<Pattern>(?!(if|else|foreach|routine|while))[a-zA-Z0-9_\.]+</Pattern>		
			<Style>
				<Background red="0" green="0" blue="0" alpha="0"/>
				<Foreground red="0" green="0" blue="0" alpha="255"/>
				<Bold>false</Bold>
				<Italic>false</Italic>
			</Style>

			<AlternateStyles>
				<Style pattern="(return|break|true|false|null|global|variabletype|version)">
					<Background red="0" green="0" blue="0" alpha="0"/>
					<Foreground red="150" green="0" blue="80" alpha="255"/>
					<Bold>true</Bold>
					<Italic>false</Italic>
				</Style>
			</AlternateStyles>
		</Token>
		
		<!-- Round braces -->
		<Token name="openbraceround" length="1">
			<TokenStart>(</TokenStart>
			<Pattern>\(</Pattern>		
			<Style>
				<Background red="0" green="0" blue="0" alpha="0"/>
				<Foreground red="255" green="0" blue="0" alpha="255"/>
				<Bold>false</Bold>
				<Italic>false</Italic>
			</Style>
			<AlternateStyles/>
		</Token>
		
		<Token name="closebraceround" length="1">
			<TokenStart>)</TokenStart>
			<Pattern>\)</Pattern>		
			<Style>
				<Background red="0" green="0" blue="0" alpha="0"/>
				<Foreground red="255" green="0" blue="0" alpha="255"/>
				<Bold>false</Bold>
				<Italic>false</Italic>
			</Style>
			<AlternateStyles/>
		</Token>
		
		<!-- Literal -->
		<Token name="literal" length="0" unescape="true" matchgroup="1">
			<TokenStart>"</TokenStart>
			<Pattern><![CDATA[\"((.*?)(?<!(\\))(\\\\)*)\"]]></Pattern>		
			<Style>
				<Background red="0" green="0" blue="0" alpha="0"/>
				<Foreground red="0" green="0" blue="140" alpha="255"/>
				<Bold>false</Bold>
				<Italic>false</Italic>
			</Style>
			<AlternateStyles/>
		</Token>	
		
		<!-- Seperator -->	
		<Token name="seperator" length="1">
			<TokenStart>,</TokenStart>
			<Pattern>,</Pattern>		
			<Style>
				<Background red="0" green="0" blue="0" alpha="0"/>
				<Foreground red="0" green="0" blue="0" alpha="255"/>
				<Bold>false</Bold>
				<Italic>false</Italic>
			</Style>
			<AlternateStyles/>
		</Token>
		
		<!-- Delimiter -->
		<Token name="delimiter" length="1">
			<TokenStart>;</TokenStart>
			<Pattern>;</Pattern>		
			<Style>
				<Background red="0" green="0" blue="0" alpha="0"/>
				<Foreground red="0" green="0" blue="0" alpha="255"/>
				<Bold>false</Bold>
				<Italic>false</Italic>
			</Style>
			<AlternateStyles/>
		</Token>
		
		<!-- compare -->
		<Token name="compare" length="0">
			<Pattern><![CDATA[(==|!=|>=|<=|>|<)]]></Pattern>		
			<Style>
				<Background red="0" green="0" blue="0" alpha="0"/>
				<Foreground red="0" green="0" blue="0" alpha="255"/>
				<Bold>false</Bold>
				<Italic>false</Italic>
			</Style>
			<AlternateStyles/>
		</Token>
		
		<!-- assignment -->
		<Token name="assignment" length="1">
			<TokenStart>=</TokenStart>
			<Pattern>=</Pattern>		
			<Style>
				<Background red="0" green="0" blue="0" alpha="0"/>
				<Foreground red="0" green="0" blue="0" alpha="255"/>
				<Bold>false</Bold>
				<Italic>false</Italic>
			</Style>
			<AlternateStyles/>
		</Token>
		
		<!-- Curly braces -->
		<Token name="openbracecurly" length="1">
			<TokenStart>{</TokenStart>
			<Pattern>\{</Pattern>		
			<Style>
				<Background red="0" green="0" blue="0" alpha="0"/>
				<Foreground red="255" green="0" blue="0" alpha="255"/>
				<Bold>false</Bold>
				<Italic>false</Italic>
			</Style>
			<AlternateStyles/>
		</Token>
		
		<Token name="closebracecurly" length="1">
			<TokenStart>}</TokenStart>
			<Pattern>\}</Pattern>		
			<Style>
				<Background red="0" green="0" blue="0" alpha="0"/>
				<Foreground red="255" green="0" blue="0" alpha="255"/>
				<Bold>false</Bold>
				<Italic>false</Italic>
			</Style>
			<AlternateStyles/>
		</Token>		
		
		<!-- Single line comment-->
		<Token name="commentsingle" length="0" iscomment="true">
			<TokenStart>//</TokenStart>
			<Pattern>(//[^\r\n]*)</Pattern>		
			<Style>
				<Background red="0" green="0" blue="0" alpha="0"/>
				<Foreground red="0" green="100" blue="0" alpha="255"/>
				<Bold>false</Bold>
				<Italic>false</Italic>
			</Style>
			<AlternateStyles/>
		</Token>
		
		<!-- Multi-line comment -->
		<Token name="commentmulti" length="0" iscomment="true">
			<TokenStart>/*</TokenStart>
			<Pattern>(/\*.*?\*/)</Pattern>		
			<Style>
				<Background red="0" green="0" blue="0" alpha="0"/>
				<Foreground red="0" green="100" blue="0" alpha="255"/>
				<Bold>false</Bold>
				<Italic>false</Italic>
			</Style>
			<AlternateStyles/>
		</Token>
		
		<!-- boolean operators -->
		<Token name="boolean" length="2">
			<Pattern><![CDATA[(&&|\|\|)]]></Pattern>		
			<Style>
				<Background red="0" green="0" blue="0" alpha="0"/>
				<Foreground red="0" green="0" blue="0" alpha="255"/>
				<Bold>false</Bold>
				<Italic>false</Italic>
			</Style>
			<AlternateStyles/>
		</Token>
		
		<!-- Square braces -->
		<Token name="openbracesquare" length="1">
			<TokenStart>[</TokenStart>
			<Pattern>\[</Pattern>		
			<Style>
				<Background red="0" green="0" blue="0" alpha="0"/>
				<Foreground red="255" green="0" blue="0" alpha="255"/>
				<Bold>false</Bold>
				<Italic>false</Italic>
			</Style>
			<AlternateStyles/>
		</Token>

		<Token name="closebracesquare" length="1">
			<TokenStart>]</TokenStart>
			<Pattern>\]</Pattern>		
			<Style>
				<Background red="0" green="0" blue="0" alpha="0"/>
				<Foreground red="255" green="0" blue="0" alpha="255"/>
				<Bold>false</Bold>
				<Italic>false</Italic>
			</Style>
			<AlternateStyles/>
		</Token>		
		
		<!-- System keywords -->
		<Token name="if" length="2">
			<TokenStart>if</TokenStart>
			<Pattern>(if)[^\w]</Pattern>		
			<Style>
				<Background red="0" green="0" blue="0" alpha="0"/>
				<Foreground red="150" green="0" blue="80" alpha="255"/>
				<Bold>true</Bold>
				<Italic>false</Italic>
			</Style>
			<AlternateStyles/>
		</Token>
		
		<Token name="else" length="4">
			<TokenStart>else</TokenStart>
			<Pattern>(else)[^\w]</Pattern>		
			<Style>
				<Background red="0" green="0" blue="0" alpha="0"/>
				<Foreground red="150" green="0" blue="80" alpha="255"/>
				<Bold>true</Bold>
				<Italic>false</Italic>
			</Style>
			<AlternateStyles/>
		</Token>
		
		<Token name="foreach" length="7">
			<TokenStart>foreach</TokenStart>
			<Pattern>(foreach)[^\w]</Pattern>		
			<Style>
				<Background red="0" green="0" blue="0" alpha="0"/>
				<Foreground red="150" green="0" blue="80" alpha="255"/>
				<Bold>true</Bold>
				<Italic>false</Italic>
			</Style>
			<AlternateStyles/>
		</Token>
		
		<Token name="routine" length="7">
			<TokenStart>routine</TokenStart>
			<Pattern>(routine)[^\w]</Pattern>		
			<Style>
				<Background red="0" green="0" blue="0" alpha="0"/>
				<Foreground red="150" green="0" blue="80" alpha="255"/>
				<Bold>true</Bold>
				<Italic>false</Italic>
			</Style>
			<AlternateStyles/>
		</Token>
		
		<Token name="while" length="5">
			<TokenStart>while</TokenStart>
			<Pattern>(while)[^\w]</Pattern>		
			<Style>
				<Background red="0" green="0" blue="0" alpha="0"/>
				<Foreground red="150" green="0" blue="80" alpha="255"/>
				<Bold>true</Bold>
				<Italic>false</Italic>
			</Style>
			<AlternateStyles/>
		</Token>

		<!-- Operators -->
		
		<Token name="operator_increment" length="0">
			<Pattern>(\+\+)</Pattern>	
			<Style>
				<Background red="0" green="0" blue="0" alpha="0"/>
				<Foreground red="0" green="0" blue="0" alpha="255"/>
				<Bold>false</Bold>
				<Italic>false</Italic>
			</Style>
			<AlternateStyles/>
		</Token>
		
		<Token name="operator_reduction" length="0">
			<Pattern>(--)</Pattern>	
			<Style>
				<Background red="0" green="0" blue="0" alpha="0"/>
				<Foreground red="0" green="0" blue="0" alpha="255"/>
				<Bold>false</Bold>
				<Italic>false</Italic>
			</Style>
			<AlternateStyles/>
		</Token>
		
		<Token name="operator_plus" length="0">
			<Pattern>(\+)</Pattern>	
			<Style>
				<Background red="0" green="0" blue="0" alpha="0"/>
				<Foreground red="0" green="0" blue="0" alpha="255"/>
				<Bold>false</Bold>
				<Italic>false</Italic>
			</Style>
			<AlternateStyles/>
		</Token>
		
		<Token name="operator_minus" length="0">
			<Pattern>(-)</Pattern>	
			<Style>
				<Background red="0" green="0" blue="0" alpha="0"/>
				<Foreground red="0" green="0" blue="0" alpha="255"/>
				<Bold>false</Bold>
				<Italic>false</Italic>
			</Style>
			<AlternateStyles/>
		</Token>
		
		<Token name="operator_multiply" length="0">
			<Pattern>(\*)</Pattern>	
			<Style>
				<Background red="0" green="0" blue="0" alpha="0"/>
				<Foreground red="0" green="0" blue="0" alpha="255"/>
				<Bold>false</Bold>
				<Italic>false</Italic>
			</Style>
			<AlternateStyles/>
		</Token>
		
		<Token name="operator_divide" length="0">
			<Pattern>(/)</Pattern>	
			<Style>
				<Background red="0" green="0" blue="0" alpha="0"/>
				<Foreground red="0" green="0" blue="0" alpha="255"/>
				<Bold>false</Bold>
				<Italic>false</Italic>
			</Style>
			<AlternateStyles/>
		</Token>
		
		<Token name="operator_modulo" length="0">
			<Pattern>(%)</Pattern>	
			<Style>
				<Background red="0" green="0" blue="0" alpha="0"/>
				<Foreground red="0" green="0" blue="0" alpha="255"/>
				<Bold>false</Bold>
				<Italic>false</Italic>
			</Style>
			<AlternateStyles/>
		</Token>
		
		<Token name="operator_power" length="0">
			<Pattern>(\^)</Pattern>	
			<Style>
				<Background red="0" green="0" blue="0" alpha="0"/>
				<Foreground red="0" green="0" blue="0" alpha="255"/>
				<Bold>false</Bold>
				<Italic>false</Italic>
			</Style>
			<AlternateStyles/>
		</Token>
		
		<Token name="operator_negate" length="0">
			<Pattern>(\!(?!=))</Pattern>	
			<Style>
				<Background red="0" green="0" blue="0" alpha="0"/>
				<Foreground red="0" green="0" blue="0" alpha="255"/>
				<Bold>false</Bold>
				<Italic>false</Italic>
			</Style>
			<AlternateStyles/>
		</Token>
		
	</Tokens>

</Language>