allprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	group = 'nl.xillio'
	version = version
	
	repositories {
		mavenLocal()
		mavenCentral()
	}
	
	javadoc{
		failOnError = !Boolean.parseBoolean(javadocIgnoreErrors)
	}
	
	task sourceJar(type: Jar) {
		from sourceSets.main.allJava
	}
	
	/*
	 * MAVEN PUBLISH
	 */
	 if(project.name != 'xill-plugins') {
		apply plugin: 'maven-publish'
		publishing {
			publications {
				maven(MavenPublication) {
					groupId group
					artifactId 'xill-' + project.name
					version project.version
		
					from components.java
							
					artifact sourceJar {
						classifier "sources"
					}
				}
			}
			
			 repositories {
						maven {
								url 'http://$mavenRepositoryHost:$mavenRespoitoryPort/nexus/content/repositories/releases'
								name 'release'
								credentials {
									username = mavenUsername
									password = mavenPassword
								}
						}
				}
		}
	}
	
	test{
		useTestNG{
				useDefaultListeners = true
		};
	}
	
	dependencies {
			testCompile 'org.testng:testng:6.9.4'
			testCompile "org.mockito:mockito-core:1.+"
	}
}

description = 'this root project contains the overview of the contenttools application'

/*
 * APPLICATION
 */
def mainClassName = "nl.xillio.contenttools.Application"
sourceCompatibility = 1.8
targetCompatibility = 1.8
def pluginsDir = new File(buildDir, '../plugins')
def esConsoleDir = new File(buildDir, '../ESConsole')
def xilliosettingsFile = new File(buildDir, '../xilliosettings.db')

/*
 * JAVA
 */

configurations {
	plugin
}

dependencies {
	compile 'nl.xillio:commons-plugins:1.0'
	compile project(':api')
	plugin project(':processor')
	plugin project(':ide')
	plugin project(':xill-plugins')
}

/*
 * JavaFX
 */
apply from: 'http://dl.bintray.com/content/shemnon/javafx-gradle/8.1.1/javafx.plugin'

jfxDeploy {
	inputFiles = files(libsDir)
}

task assembleContenttools(type: Copy){
	description 'Copies output from the processor and the ide to a plugins directory so eclipse will be able to load the plugins.'
	//Processor
	from project(':processor').jar
	from project(':processor').configurations.runtime
	//Contentttools
	from project(':ide').jar
	from project(':ide').configurations.runtime
	//Plugins
	from project(':xill-plugins').configurations.runtime
	into pluginsDir
}

jar{
	dependsOn assembleContenttools
	dependsOn project(':processor').jar
	dependsOn project(':ide').jar
	
	//We need to do this so we can have the plugins folder in the package too
	doLast {
			copy {
					from assembleContenttools
					into new File(libsDir, 'plugins')
			}
	}
}

javafx {
	appID = appID
	appName = friendlyName
	copyright = copyrightInformation
	mainClass mainClassName
	vendor = company
	menu = true
	shortcut = true
    embedJNLP = false
}



task cleanRuntime {
	description 'Deletes all the folders generated and used by contenttools running in eclipse'
	
	delete pluginsDir
	delete esConsoleDir
}

clean {
	dependsOn cleanRuntime
}

eclipseClasspath {
	dependsOn assembleContenttools
}

//Test vpn connection
if(testConnection(mavenRepositoryHost)) {
	logger.info "We have a connection to $mavenFriendlyServerName"
	
	addRepositories(mavenRepositoryHost)
}else if(testConnection(mavenRepositoryHostFallback)) {
	logger.info "We have a connection to $mavenFriendlyServerName through a tunnel"
	addRepositories(mavenRepositoryHostFallback)
}else {
	logger.error 	"Unable to connect to $mavenFriendlyServerName\n" +
							"Read the wiki to see how to connect to $mavenFriendlyServerName\n"+
							"link: $mavenRepositoryConnectionGuide"
}

def testConnection(host) {
	try {
		def socket = new Socket();
		socket.connect(new InetSocketAddress(host, Integer.parseInt(mavenRespoitoryPort)), Integer.parseInt(mavenTimeout))
		socket.close()
		
		return true;
	} catch (IOException ex) {
		return false;
	}
}

def addRepositories(host) {
	allprojects{
		repositories {
			maven {
				url "http://$host:$mavenRespoitoryPort/nexus/content/repositories/releases"
				credentials {
					username mavenUsername
					password mavenPassword
				}
			}
			maven {
				url "http://$host:$mavenRespoitoryPort/nexus/content/repositories/thirdparty"
				credentials {
					username mavenUsername
					password mavenPassword
				}
			}
		}
	}
}

run.dependsOn(assembleContenttools)