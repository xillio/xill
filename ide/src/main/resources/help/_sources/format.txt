------
format
------

**format (**\ *string* **text,** *any* **values)**

Description
-----------

Returns a string which contains ``text`` with ``values`` inserted at certain placeholders in a certain format, just like a c-style printf statement.

Details
-------

The first parameter, ``text``, is a format string specifying how the objects in the second parameter, ``values``, are to be formatted. The format string contains plain text as well as format specifiers, which are special characters that format the arguments of ``values``.

``values`` accepts a single parameter. When the format string expects multiple parameters these have to be supplied as a list, surrounded by braces '{}' (see the 'date' example below).

Format specifiers begin with a percent sign (%) and end with a converter. The converter is a character indicating the type of argument to be formatted. In between the percent sign (%) and the converter you can have optional flags and specifiers.

Some converters and flags used in formatstrings:

=========   ======   ===========
Converter   Flag     Explanation
=========   ======   ===========
d                    A decimal integer.
f                    A float.
n                    A new line character appropriate to the platform running the application. You should always use %n, rather than \n.
tB                   A date & time conversion locale-specific full name of month.
td, te               A date & time conversion 2-digit day of month. td has leading zeroes as needed, te does not.
ty, tY               A date & time conversion ty = 2-digit year, tY = 4-digit year.
tl                   A date & time conversion hour in 12-hour clock.
tM                   A date & time conversion minutes in 2 digits, with leading zeroes as necessary.
tp                   A date & time conversion locale-specific am/pm (lower case).
tm                   A date & time conversion months in 2 digits, with leading zeroes as necessary.
tD                   A date & time conversion date as %tm%td%ty
..          08       Eight characters in width, with leading zeroes as necessary.
..          ``+``        Includes sign, whether positive or negative.
..          ,        Includes locale-specific grouping characters.
..          ``-``        Left-justified..
..          .3       Three places after decimal point.
..          10.3     Ten characters in width, right justified, with three places after decimal point.
=========   ======   ===========

For more documentation see: http://docs.oracle.com/javase/tutorial/java/data/numberformat.html and http://docs.oracle.com/javase/1.5.0/docs/api/java/util/Formatter.html#syntax

Examples
--------

-

    basic example:
    
    ::
    
		i = 461012;
		log(format("The value of i is: %d%n", i));
    
    The %d specifies that the single variable is a decimal integer. The %n is a platform-independent newline character. The output is:

    ::
        
        The value of i is: 461012
        
-

    Date example:
    
    ::
    
		log(format("Today is: %td %tB %tY", {date(), date(), date()}));
    
    The example supplies three time the current date to the format function in order to extract desired day, month and year. The output will be something like:
    
    ::
        
        Today is: 03 april 2015
        
-

    More examples (note that the floating point decimal separator is dependent on the system locale):
    
    ::
    
        n = 461012;
        pi = 3.141593;

        log (format("%d%n", n));      //  -->  "461012"
        log (format("%08d%n", n));    //  -->  "00461012"
        log (format("%+8d%n", n));    //  -->  " +461012"
        log (format("%,8d%n", n));    // -->  " 461,012"
        log (format("%+,8d%n%n", n)); //  -->  "+461,012"

        log (format("%f%n", pi));       // -->  "3,141593"
        log (format("%.3f%n", pi));     // -->  "3,142"
        log (format("%10.3f%n", pi));   // -->  "     3,142"
        log (format("%-10.3f%n", pi));  // -->  "3,142"
          
Tags
----

:doc:`_tag_text`