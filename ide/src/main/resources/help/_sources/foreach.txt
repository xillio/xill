-------
foreach
-------

**foreach (**\ *string* **__key,** *string* **__value,** *any* **__list)**

Description
-----------

Iterates over all items in the provided list, putting ``key`` and ``value`` into the provided variables. If a non-list variable is provided, the foreach will run once, while putting the value of the variable into the ``value``. If ``list`` is ``null``, the foreach construct will not loop at all. By convention an underscore ``_`` is used as first parameter if we do not need to use the ``key``.

See also :doc:`while`

Examples
--------

-
    Looping through a basic list:
    
    ::
    
        items = {1,2,3,4,5,6,7,8,9};
        foreach(_,item,items){
            log(item);
        }

-
    Looping through an Excel sheet:
    
    ::
    
        listFromSheet = routine (startrow, columnlist, currentsheet) {
        //returns a list of clean URL's from an Excel spreadsheet identified by index currentsheet, starting at row startrow and looping over columns in columnlist
            result = {null, null};    
            index = 0;
            
            foreach (_, column, columnlist) {
                row = startrow; 
                while (row < currentsheet.rows) {
                    currentcell = trim (getcell (currentsheet, column, row));
                    if ((currentcell != null) && (startswith (currentcell, "http://")))  {
                        result[index] = replace (currentcell, "/$", ""); //strip trailinig slash;
                        index = index + 1;
                    } 
                    row = row + 1;
                }
            }
            return (result);
        }

-

    Loop through links on a page:
    
    ::
    
        // Process links on the page
        page = loadpage("http://www.xillio.com");
        links = xpath(page, "//a");
        foreach(numberinlevel, link, links) {
            // numberinlevel contains a counter counting the links
            url = xpath(link, "./@href");
            if (variabletype (url) == "list") {
                url = url[0];
            }
        }
        
-

    Compare URL's to a list:
    
    ::
    
        if (fileexists (settings.subset_file_uri)) { // make a list of URL's that form the subset for this test
            sublist = global (split (loaddata (settings.subset_file_uri), "\r\n"));
            //log ("Subset for test: \n" + sublist);
        }

        insubset = routine (pageid) {
        // returns true if pageid is on the list of URL's to be included in the test or if it is a sub URL of those on the list.
            url = geturl (pageid);
            if (url != null) {
                if (contains (sublist, url)) {
                    return (true); // URL on the list
                } else {
                    foreach (index, suburl, sublist) {
                        if (contains (url, suburl)) {
                            return (true); // sub URL on the list
                        }
                    }
                }
                return (false); //url not on the list
            } else { // page does not exist
                return (null);
            }
        }

Tags
----

:doc:`_tag_language`