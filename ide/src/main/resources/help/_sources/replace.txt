-------
replace
-------

**replace (**\ *<string,void>* **text,** *string* **needle,** *string* **replacement,** *boolean* **useregex*, ** *boolean* **replaceall*,** *number* **timeout*)**

Description
-----------

Returns a new string based on the string ``text`` in which occurrences of the string ``needle`` have been replaced by the string ``replacement``. If the optional parameter ``replaceall`` is set to ``false``, the routine will only replace the first occurrence of ``needle`` (defaults to ``true``).

Note that ``needle`` is by default interpreted as a regex pattern, so all special regex characters have to be escaped when used as a literal. Also in ``replacement`` you can use the capture groups from ``needle`` as ``"$1"``, ``"$2"``, etc. To use a literal ``"$"`` in ``replacement``, you need to escape it like this: ``"\$"``.

Set ``useregex`` to false to have the function treat the needle and replacement as regular text.

Optionally a ``timeout`` can be provided in seconds, the default value is 5 seconds and applies when omitted. Set ``timeout`` to zero to let the function run without timeout. This should only be altered when dealing with large source documents. The timeout is there to protect the system from hanging on invalid expressions.

See the :doc:`_tag_regex` page for more about Regular Expression support in Content Tools.

Examples
--------


-
    
    Executing:
    
    ::

        log(replace("The quick brown fox.", "fox", "dog"));
    
    will print:
    
    ::
    
       The quick brown dog.

       
-
    
    Executing:
    
    ::
    
        log(replace("The quick brown fox. The quick brown fox.", "fox", "dog"));
    
    will print:
    
    ::
    
       The quick brown dog. The quick brown dog.

-
    
    Executing:
    
    ::
    
        log(replace("The quick brown fox. The quick brown fox.", "fox", "dog", false));
    
    will print:
    
    ::
    
       The quick brown dog. The quick brown fox.
       
-

    Repair misspelled URL's (with one slash):
    
    ::
        
        url = "http:/www.xillio.com/";
        url = replace(url, "(^http:/)([^/].*)", "http://$2");
        log (url);
        
    will print:
    
    ::
    
        http://www.xillio.com/

-
    
    Executing:
    
    ::
    
        log(cleanurlsimple("http://www.xillio.com/somepage#main?live=true&format=1", true, true));
        cleanurlsimple = routine(url, stripanchors, stripvars) {
            if (stripanchors == true) {
                url = replace(url, "#.*", ""); // strip anchors
            }
            if (stripvars == true) {
                url = replace(url, "\?.*|\&.*|target=.*", ""); // strip appended variables
            }
            url = replace(url, "/$", ""); // strip trailing slash
            url = urldecode(url);
            return(url);
        }

    will print:
    
    ::
    
        http://www.xillio.com/somepage
        
Tags
----

:doc:`_tag_text`, :doc:`_tag_regex`