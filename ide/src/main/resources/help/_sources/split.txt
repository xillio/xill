-----
split
-----

**split (**\ *<void,string>* **value,** *string* **delimiter,** *boolean* **keepempty)**

Description
-----------

Splits the string ``value`` into a list of strings, based on the provided string ``delimiter`` and returns that list. ``delimiter`` is interpreted as a Java Regular expression, but since all backslash ``"\"`` characters will be interpreted as an escape character for the next one by the XMT all forward slashes you want to be evaluated by the regex have to be doubled. This means that ``"\\\\"`` would denote a single literal backslash ``"\"`` and ``"\\*"`` would denote a literal asterisk ``"*"``. However, since Java is very smart in escaping, you will get away with using some single backslashes, for example for newline characters you can simply write ``"\n"``.

By default empty entries are skipped. You can optionally set ``keepempty`` to true to also add empty entries to the resulting list.

Read more about Java regular expressions here: http://www.regular-expressions.info/reference.html

See also :doc:`listtocsv`

Examples
--------

-
    
    Executing:
    
    ::
    
        log(split("Xillio Xillio Sausage Xillio    Xillio", " "));

    will print:
    
    ::
    
        [
            "Xillio",
            "Xillio",
            "Sausage",
            "Xillio",
            "Xillio"
        ]

-
    
    Executing:
    
    ::
    
        log(split("xillio/about/contact////index.html", "/", true));

    will print:
    
    ::
    
        [
            "xillio",
            "about",
            "contact",
            "",
            "",
            "",
            "index.html"
        ]    
        
-

    Split a URL into its parts:
    
    ::
    
        parts = split(url, "/");

-   

    Read a (Windows) text file line by line:
    
    ::
    
        lines = split (loaddata (file_uri), "\r\n");

Tags
----

:doc:`_tag_text`, :doc:`_tag_list`