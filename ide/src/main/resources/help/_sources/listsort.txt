--------
listsort
--------

**listsort (**\ *<list,void>* **list,** *boolean* **sortbykeys***, *boolean* **sortsublists***)

Description
-----------

Sorts a list in ascending order. The optional parameter ``sortbykeys`` is a boolean. When set to ``true`` the list is sorted based on keys, when set to ``false`` (or omitted) the list is sorted by values. The optional parameter ``sortsublists`` is a boolean. When set to ``true`` (or omitted) the list is sorted recursively, when set to ``false`` only the outer-most level of the list is sorted.

A list may contain any combination of data: numbers, strings, dates, lists etc. Anything that is not a ``list`` or ``number`` is treated as a ``string``.

**Sort by value**\

Sorting applies to comparable data-types, ie. numbers are compared with numbers, strings are compared with strings. If a list contains eg. numbers, strings and lists, the following sort-sequence applies:

- lists
- numbers
- strings

**Sort by key**\

A list-entry may have its key explicitly specified. A list may contain any combination of entries with or without keys specified. The following sort-sequence applies:

- entries with explicit keys
- entries without explicit keys

Example
-------

-

    Using the following list for all examples:
    
    ::
        
        mylist = {
            "0b",
            "b"=1,
            "c"={"3"="b", 
                 "2"="c"},
            "d"={"2" ="a", 
                 "1"="b"},
            "e"=2,
            "00"
        };
        
-
    Sorted by values
    
    ::
        
        log(listsort(mylist));
        
    will output:
    
    ::
        
        {
            c = {
                3 = "b",
                2 = "c"
            },
            d = {
                2 = "a",
                1 = "b"
            },
            b = 1,
            e = 2,
            "00",
            "0b"
        }
        
-

    Sorted by keys
    
    ::
    
        log(listsort(mylist, true));
        
    will output:
    
    ::
    
        {
            b = 1,
            c = {
                2 = "c",
                3 = "b"
            },
            d = {
                1 = "b",
                2 = "a"
            },
            e = 2,
            "00",
            "0b"
        }
    
-

    Sorted by keys recursively
    
    ::
    
        log(listsort(mylist, true, true));
        
    will output:
    
    ::
    
        {
            b = 1,
            c = {
                2 = "c",
                3 = "b"
            },
            d = {
                1 = "b",
                2 = "a"
            },
            e = 2,
            "0b",
            "00"
        }

-

    Sorted by keys outermost list only
    
    ::
            
        log(listsort(mylist, true, false));
    
    will output:
    
    ::
    
        {
            b = 1,
            c = {
                3 = "b",
                2 = "c"
            },
            d = {
                2 = "a",
                1 = "b"
            },
            e = 2,
            "0b",
            "00"
        }
-

    Sorted by values recursively
    
    ::
        
        log(listsort(mylist, false));

    will output:
    
    ::
    
        {
            c = {
                3 = "b",
                2 = "c"
            },
            d = {
                2 = "a",
                1 = "b"
            },
            b = 1,
            e = 2,
            "00",
            "0b"
        }
    
-
    
    Sorted by values outermost list only
    
    ::
    
        log(listsort(mylist, false, false));
        
    will output:
    
    ::
    
        {
            c = {
                3 = "b",
                2 = "c"
            },
            d = {
                2 = "a",
                1 = "b"
            },
            b = 1,
            e = 2,
            "00",
            "0b"
        }
    
Tags
----

:doc:`_tag_list`